<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">
<!ENTITY plusmn "&#xB1;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject role="fo">
<imagedata fileref="figures/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
<imageobject role="html">
<imagedata fileref="../figures/Check_mark_23x20_02.png"
format="PNG" />
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject role="fo">
<imagedata fileref="figures/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
<imageobject role="html">
<imagedata fileref="../figures/Arrow_east.png"
format="PNG" />
</imageobject>
</inlinemediaobject>'>
]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_troubleshooting">
    <title>Troubleshooting</title>

    <?dbhtml stop-chunking?>
    <para/>
    <section xml:id="troubleshooting_authoring">
        <title>Authoring and Publishing process</title>
        <informaltable rules="all">
            <thead>
                <tr>
                    <th>Problem </th>
                    <th>Solution </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Maven says "BUILD FAILURE" for a document that
                        previously achieved "BUILD SUCCESS" using an
                        earlier version of the formatting plugin </td>
                    <td>
                        <link
                            xlink:href="https://wiki.mosso.com/display/IXD/Cloud+Doc+Tools+release+notes"
                            >https://wiki.mosso.com/display/IXD/Cloud+Doc+Tools+release+notes</link>
                        identifies changes you may have to make to
                        build an older document with a newer version
                        of the formatting plugin. Look for sections
                        marked <code>"Impacts to current
                            projects"</code>. These are changes
                        controlled by the Doc Tools team; contact them
                        at
                            <email>clouddoctoolsteam@lists.rackspace.com</email>
                        for help.   </td>
                </tr>
                <tr>
                    <td>in Author, message "E [Schematron 1.5] Please
                        use HTML tables instead of CALS tables.
                        (not(db:tgroup)) [assert]" and condition=red
                        in a document that was previously
                        condition=green   </td>
                    <td>
                        <link
                            xlink:href="http://www.sagehill.net/docbookxsl/Tables.html"
                            >http://www.sagehill.net/docbookxsl/Tables.html</link> 
                        explains HTML versus CALS tables. Both types
                        can be built, but CALS tables are defective
                        (missing parts of frame) in generated HTML, so
                        Schematron is now enforcing HTML-only tables;
                            <link
                            xlink:href="https://one.rackspace.com/display/RED/Rebuild+old+CALS+tables+as+HTML"
                            >https://one.rackspace.com/display/RED/Rebuild+old+CALS+tables+as+HTML</link>
                    </td>
                </tr>
                <tr>
                    <td>In Author, message "E [Schematron 1.5] xml:id
                        required on book, part, section, chapter,
                        appendix, and preface. (@xml:id) [assert]" and
                        condition=red in a document that was
                        previously condition=green   </td>
                    <td>Add an xml:id to everything that might be
                        linked to; for instance, <code>&lt;section
                            xml:id="Embedded-d1e111"&gt;</code> rather
                        than <code>&lt;section&gt;</code>. The Doc
                        Tools team has a script to run against a
                        document and add xml:id throughout; contact
                        them at
                            <email>clouddoctoolsteam@lists.rackspace.com</email>
                        for help. </td>
                </tr>
            </tbody>
        </informaltable>
        <section xml:id="rebuild_cals">
            <title>Rebuild Old CALS Tables as HTML Tables</title>
            <para>DO THIS: This is what works now.</para>
            <programlisting language="xml"><xi:include href="samples/table_good.xml" parse="text"/></programlisting>
            <para>REPLACE THIS. This previously worked, so you might
                find it in an old document; if you do, rebuild it to
                match what works now.</para>
            <programlisting language="xml"><xi:include href="samples/table_bad.xml" parse="text"/></programlisting>
        </section>
        <section xml:id="tables_troubleshooting">
            <title>Tables</title>
            <itemizedlist>
                <listitem>
                    <para>PROBLEM 1: The same XML source generates
                        tables that have one width in PDF and another
                        in HTML.</para>
                </listitem>
                <listitem>
                    <para>PROBLEM 2: Tables are edgeless, with no
                        left, right, or bottom borders.</para>
                </listitem>
                <listitem>
                    <para>PROBLEM 3: long URLs don't wrap inside table
                        cell</para>
                </listitem>
                <listitem>
                    <para>SOLUTION to PROBLEM 1: Specify width twice,
                        once for PDF &amp; once for HTML.</para>
                </listitem>
                <listitem>
                    <para>SOLUTION to PROBLEM 2: Define borders twice,
                        once for interior (rules) and once for
                        exterior (frame).</para>
                </listitem>
                <listitem>
                    <para>SOLUTION TO PROBLEM 3: Turn the table and
                        give it a crazy size.</para>
                </listitem>
            </itemizedlist>


            <section xml:id="problem1">
                <title>PROBLEM 1: The same XML source generates tables
                    that have one width in PDF and another in
                    HTML.</title>
                <para/>
            </section>
            <section xml:id="problem2">
                <title>PROBLEM 2: Tables are edgeless, with no left,
                    right, or bottom borders.</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <th>this XML </th>
                            <th>generates this PDF </th>
                            <th>generates this HTML </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <para>XML 1</para>
                                <para> generated by clicking button
                                   and accepting defaults in
                                   oXygen</para>
                            </td>
                            <td>
                                <para>
                                   <emphasis role="italic"
                                   >good!</emphasis></para>
                            </td>
                            <td>
                                <para>
                                   <emphasis role="italic"
                                   >bad!</emphasis></para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <para>XML 2</para>
                                <para> generated by hand coding </para>
                                <para> (clicking button and choosing
                                   HTML rather than CALS default </para>
                                <para> does not alter skinny HTML
                                   columns; </para>
                                <para> must specify percentages and
                                   retry until reasonable)</para>
                            </td>
                            <td>
                                <para>
                                   <emphasis role="italic">not as
                                   good:</emphasis></para>
                                <itemizedlist>
                                   <listitem>
                                   <para><emphasis role="italic">regex
                                   on 2 lines</emphasis></para>
                                   </listitem>
                                </itemizedlist>
                            </td>
                            <td>
                                <para>
                                   <emphasis role="italic">not as
                                   bad:</emphasis></para>
                                <itemizedlist>
                                   <listitem>
                                   <para><emphasis role="italic"
                                   >columns almost correct
                                   width</emphasis></para>
                                   </listitem>
                                   <listitem>
                                   <para><emphasis role="italic">frame
                                   is defective, no outer
                                   edges</emphasis></para>
                                   </listitem>
                                </itemizedlist>
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>table-HTML-edgeless.png</para>
                <para>Error rendering macro 'code' :
                    org/lobobrowser/html/gui/HtmlPanel</para>
                <para> </para>
                <para>Error rendering macro 'code' :
                    org/lobobrowser/html/gui/HtmlPanel</para>
            </section>
            <section xml:id="problem3">
                <title>PROBLEM 3: long URLs don't wrap inside table
                    cell</title>
                <para>DocBook can generate linebreaks at a space or a
                    slash, but not at a period such as in
                    verylongdescriptivenameofaresource.com. In HTML
                    output, the table cell simply becomes wide enough
                    to hold the whole thing, even if that's huge; In
                    PDF output, that doesn't happen. This causes long
                    URLs in a table in a PDF to be wider than the
                    table cell that contains them, which causes them
                    to overstrike the contents of an adjacent cell or
                    to disappear off the edge of the page. To some
                    extent, that's just that; DocBook doesn't involve
                    itself in linebreaks, and people gripe and
                    struggle with that at <link
                        xlink:href="http://stackoverflow.com/questions/4350788/xsl-fo-force-wrap-on-table-entries"
                        >http://stackoverflow.com/questions/4350788/xsl-fo-force-wrap-on-table-entries</link>
                    and elsewhere.</para>
                <para>Two things can help: turning the table and lying
                    about the table's size.</para>
            </section>
            <section xml:id="problem1_sol">
                <title>SOLUTION to PROBLEM 1: Specify width twice,
                    once for PDF &amp; once for HTML.</title>
                <para><link
                        xlink:href="http://www.sagehill.net/docbookxsl/Tables.html#TableWidth"
                        >http://www.sagehill.net/docbookxsl/Tables.html#TableWidth</link>
                    explains that width is controlled separately for
                    "FO output" (aka PDF) and HTML. So, specify it
                    twice, only in a CALS-type table, like
                    this:</para>
                <para>Error rendering macro 'code' :
                    org/lobobrowser/html/gui/HtmlPanel</para>
                <para>This is the best I've been able to do; time's
                    way past up. Still mismatched column widths: too
                    wide in HTML, too narrow in PDF. But closer now
                    and tolerable.</para>
            </section>
            <section xml:id="problem2_sol">
                <title>SOLUTION to PROBLEM 2: Define borders twice,
                    once for interior (rules) and once for exterior
                    (frame).</title>
                <para>In a CALS-type table, frame="all" seems to also
                    cover the interior; in an HTML-type table,
                    rules="all" does that. Maybe. Time's up.</para>
                <para>Error rendering macro 'code' :
                    org/lobobrowser/html/gui/HtmlPanel</para>
            </section>
            <section xml:id="problem3_sol">
                <title>SOLUTION TO PROBLEM 3: Turn the table and give
                    it a crazy size.</title>
                <para>Because the URLs can't wrap to a new line within
                    a cell until they hit a space or slash, letting
                    the table size itself naturally is unreadable in
                    the generated PDF.<inlinemediaobject>
                        <imageobject>
                            <imagedata
                                fileref="figures/clip_image010_1876114937.png"
                                contentwidth="6in"/>
                        </imageobject>
                    </inlinemediaobject></para>
                <para>Turning the table on its side helped a little,
                    since it meant I could lose a separate column for
                    version, but it still left some impolite overflow
                    into the neighbor's yard. By specifying column
                    widths that add up to greater than 100% of the
                    space reserved for the table, it got better enough
                    to publish.</para>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="figures/clip_image012_-1213001825.png"
                            contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
                <para>This pushes the rightmost column all the way to
                    the physical edge of the page. 13+32+32+32 is
                    109%, but who's counting? Most printers cannot lay
                    ink all the way to the edge of a page so this
                    table may not print well, but it's all readable in
                    the PDF. Here's the XML source that generates the
                    better-enough output:</para>

                <section xml:id="build_failure">
                    <title>Build failure due to date format</title>
                    <para> </para>
                    <section xml:id="problem_build_failure">
                        <title>Problem</title>
                        <para>An old draft document uses an old
                            version of the DocBook plugin, probably
                            1.0.2-SNAPSHOT. Changing its pom.xml to
                            use the current version of the DocBook
                            plugin, such as 1.0.4, causes the build to
                            fail.</para>
                        <para> mvn clean install -X generates
                            mountains of unhelpful debug info, with
                            this near the end:</para>
                        <para>Bad Month value</para>
                        <para> [INFO]
                            ----------------------------------------------------------------------- </para>
                        <para> -</para>
                        <para> [INFO] BUILD FAILURE</para>
                        <para> [INFO]
                            ----------------------------------------------------------------------- </para>
                        <para> -</para>
                        <para> [INFO] Total time: 6.871s</para>
                        <para> [INFO] Finished at: Wed Jul 27 15:24:56
                            CDT 2011</para>
                        <para> [INFO] Final Memory: 5M/81M</para>
                        <para> [INFO]
                            ----------------------------------------------------------------------- </para>
                        <para> -</para>
                        <para> [ERROR] Failed to execute goal
                                com.rackspace.cloud.<link
                                xlink:href="http://apiclouddocs-maven-plugin:1.0.4:generate-pdf"
                                >api:clouddocs-maven-plugin:1.0.4:generate-pdf</link>
                            (default) on project cbs-ext-docs: Failed
                            to transform rax-cbs.xml. Processing
                            terminated by <link
                                xlink:href="http://xslmessage"
                                >xsl:message</link> at line 126 -&gt;
                            [Help 1]</para>
                        <para>
                            org.apache.maven.lifecycle.LifecycleExecutionException:
                            Failed to execute goal
                                com.rackspace.cloud.<link
                                xlink:href="http://apiclouddocs-maven-plugin:1.0.4:generate-pdf"
                                >api:clouddocs-maven-plugin:1.0.4:generate-pdf</link>
                            (default) on project cbs-ext-docs: Failed
                            to transform rax-cbs.xml.</para>
                    </section>
                    <section xml:id="solution_build_failure">
                        <title>Solution</title>
                        <para>"Bad Month value" is the key.</para>
                        <para> Prior to 1.0.4, the publication date
                            was expressed as mm/dd/yy; since then,
                            it's expressed as yyyy-mm-dd, and the old
                            format causes the build to fail.</para>
                        <para> In &lt;book&gt;&lt;info&gt; find
                            &lt;pubdate&gt;. Be sure it's shaped like
                            &lt;pubdate&gt;2011-07-22&lt;/pubdate&gt;.
                            Then retry the build.</para>
                    </section>
                    <section xml:id="build_failure_mvn">
                        <title>Build failure due to Maven
                            settings</title>
                        <section xml:id="problem_build_failure_mvn">
                            <title>Problem</title>
                        </section>
                        <section xml:id="solution_build_failure_mvn">
                            <title>Solution</title>
                            <para>Hide settings.xml so it's not found
                                by a project that doesn't like it;
                                bring settings.xml back so it is found
                                by a project that does like it. <link
                                   xlink:href="https://one.rackspace.com/display/RED/Troubleshooting+build+failures"
                                   >Troubleshooting build
                                   failures</link> includes 2 scripts
                                to do those things.</para>
                        </section>
                    </section>
                </section>

            </section>
        </section>
    </section>







</chapter>
